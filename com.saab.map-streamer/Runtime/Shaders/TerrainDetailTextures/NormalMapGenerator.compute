// Compute Shader to Calculate Normals Per Vertex

#pragma kernel CSMain

// Structured buffer to hold vertex positions (float3)
StructuredBuffer<float3> vertexPositions;

// Structured buffer to hold triangle indices (int3)
StructuredBuffer<int3> triangleIndices;

// RWBuffer for storing calculated vertex normals
RWStructuredBuffer<float3> vertexNormals;

int numVertices;
int triangleIndicesLength;

// Helper function to compute the normal for a triangle
float3 CalculateTriangleNormal(float3 v0, float3 v1, float3 v2)
{
    float3 edge1 = v1 - v0;
    float3 edge2 = v2 - v0;
    return normalize(cross(edge1, edge2));
}

[numthreads(64, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
    if (id >= numVertices)
    {
        return;
    }

    // Initialize normal sum and adjacent triangle counter
    float3 normalSum = float3(0.0f, 0.0f, 0.0f);
    int adjacentTriangles = 0;
    
    // Angle threshold to filter out steep angles (30 degrees in this example)
    float angleThreshold = cos(radians(30.0f));

    // Loop through all triangles to find those that use this vertex
    for (int i = 0; i < triangleIndicesLength; i++)
    {
        int3 indices = triangleIndices[i];

        // Check if the current vertex ID is one of the vertices of this triangle
        if (indices.x == id || indices.y == id || indices.z == id)
        {
            // Read the corresponding vertex positions using the indices
            float3 v0 = vertexPositions[indices.x];
            float3 v1 = vertexPositions[indices.y];
            float3 v2 = vertexPositions[indices.z];

            // Compute the normal for this triangle
            float3 triangleNormal = CalculateTriangleNormal(v0, v1, v2);

            // Calculate the angle between the triangle normal and the accumulated normal sum
            if (adjacentTriangles == 0 || dot(normalize(triangleNormal), normalize(normalSum)) > angleThreshold)
            {
                // Add the triangle normal to the normal sum
                normalSum += triangleNormal;
                adjacentTriangles++;
            }
            

        }
    }

    float3 finalNormal = float3(1.0f, 0.0f, 0.0f);
    
    // Normalize the final normal
    if (adjacentTriangles != 0)
        finalNormal = normalize(normalSum / adjacentTriangles);

    // Store the final normal in the output buffer
    vertexNormals[id] = finalNormal;
}
